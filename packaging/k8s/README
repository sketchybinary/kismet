- KISMET AND Kubernetes -

    Kismet can run in kubernetes.  I'm designing this for a standalone box that runs [k3s](https://k3s.io/) and can be fed by a bunch of other sensor boxes.
    The build no longer uses Docker anywhere on the system, but the images are available for download at https://hub.docker.com/r/sketchybinary/kismet


- DEPLOYING KISMET TO K8S
    First, confirm that you can talk to your cluster with the following command
    ```
    kubectl get nodes
    ```

    At this point, you will want to customize the kismet.yaml.  It should work out of the box, but if you'd like to use you're own image, you can change the container:image line.
    
    Then, deploy the service by running.

    ```
    kubectl apply -f kismet.yaml
    ```

- BUILDING A CONTAINER IMAGE -
    To build the system, use `buildah`.  This lets you build and interact with container images without having a root daemon.
    For more information, start with their Github page [Buildah](https://github.com/containers/buildah/blob/master/install.md)

    For simple builds, start by cloning the repo and running `buildah` at the base
    ```
    git clone https://github.com/sketchybinary/kismet.git
    cd kismet
    buildah bud -t kismet -f packaging/k8s/ ./
    ```

    This will pull an Ubuntu 16.04, the required dependencies, compile and install kismet, and build an image tagged 'kismet'.

    Before you can run the image in K8s, you must push it to a registry
    ```
    buildah login registry.hub.docker.com
    buildah tag kismet registry.hub.docker.com/my-registry-here/kismet:latest
    buildah push registry.hub.docker.com/my-registry-here/kismet:latest
    ```
    You can use a local registry if you'd like.  You will have to change "my-registry-here" to be your Docker Hub registry name.

- CONFIGURING KISMET -

    Configuring Kismet is best done with the kismet_site.conf override
    config; see the Kismet README for more information about how the
    override config works.
    
    Using this file you can enable remote capture, set the server 
    name and attributes, and set the password manually.
    
    Generally, you should either edit this file before building the
    image, or copy it into the container after creation.


- RUNNING KISMET ON REMOTE INTERFACES -

    Now you can run capture interfaces on the Docker host or on truly 
    remote sources as normal:
        $ kismet_cap_linux_wifi --connect localhost:3501 --source wlx4494fcf30eb3

